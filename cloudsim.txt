// Import required libraries from CloudSim
import org.cloudbus.cloudsim.*;
import org.cloudbus.cloudsim.core.CloudSim;
import org.cloudbus.cloudsim.provisioners.BwProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.PeProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.RamProvisionerSimple;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.List;

// Define a custom package name
package custom_package;

// Main class to implement SJF Scheduler
public class SJF_Scheduler {

    // Declare necessary lists and arrays
    private static List<Cloudlet> cloudletList;
    private static List<Vm> vmList;
    private static Datacenter[] datacenter;
    private static double[][] commMatrix;
    private static double[][] execMatrix;

    // Method to create VMs
    private static List<Vm> createVM(int userId, int vms) {
        // Create a container to store VMs
        LinkedList<Vm> list = new LinkedList<Vm>();

        // VM Parameters
        // Set VM characteristics
        long size = 10000; // image size (MB)
        int ram = 512; // vm memory (MB)
        int mips = 250;
        long bw = 1000;
        int pesNumber = 1; // number of cpus
        String vmm = "Xen"; // VMM name

        // Create VMs
        Vm[] vm = new Vm[vms];
        for (int i = 0; i < vms; i++) {
            // Initialize VMs and add to the list
            vm[i] = new Vm(datacenter[i].getId(), userId, mips, pesNumber, ram, bw, size, vmm, new CloudletSchedulerSpaceShared());
            list.add(vm[i]);
        }

        return list;
    }

    // Method to create Cloudlets
    private static List<Cloudlet> createCloudlet(int userId, int cloudlets, int idShift) {
        // Create a container to store Cloudlets
        LinkedList<Cloudlet> list = new LinkedList<Cloudlet>();

        // Cloudlet parameters
        long fileSize = 300;
        long outputSize = 300;
        int pesNumber = 1;
        UtilizationModel utilizationModel = new UtilizationModelFull();

        Cloudlet[] cloudlet = new Cloudlet[cloudlets];

        for (int i = 0; i < cloudlets; i++) {
            // Randomly select a datacenter for each cloudlet
            int dcId = (int) (Math.random() * Constants.NO_OF_DATA_CENTERS);
            long length = (long) (1e3 * (commMatrix[i][dcId] + execMatrix[i][dcId]));
            // Create cloudlets and add to the list
            cloudlet[i] = new Cloudlet(idShift + i, length, pesNumber, fileSize, outputSize, utilizationModel, utilizationModel, utilizationModel);
            cloudlet[i].setUserId(userId); // Set the owner of the cloudlets
            cloudlet[i].setVmId(dcId + 2); // Assign VMs to the cloudlets
            list.add(cloudlet[i]);
        }
        return list;
    }

    // Main method
    public static void main(String[] args) {
        Log.printLine("Starting SJF Scheduler...");

        // Generate matrices for communication and execution
        new GenerateMatrices();
        execMatrix = GenerateMatrices.getExecMatrix();
        commMatrix = GenerateMatrices.getCommMatrix();

        try {
            int num_user = 1;   // Number of grid users
            Calendar calendar = Calendar.getInstance();
            boolean trace_flag = false;  // Flag to trace events

            CloudSim.init(num_user, calendar, trace_flag);

            // Create Datacenters
            datacenter = new Datacenter[Constants.NO_OF_DATA_CENTERS];
            for (int i = 0; i < Constants.NO_OF_DATA_CENTERS; i++) {
                // Create datacenters with unique names
                datacenter[i] = DatacenterCreator.createDatacenter("Datacenter_" + i);
            }

            // Create Broker
            SJFDatacenterBroker broker = createBroker("Broker_0");
            int brokerId = broker.getId();

            // Create VMs and Cloudlets and send them to the broker
            vmList = createVM(brokerId, Constants.NO_OF_DATA_CENTERS);
            cloudletList = createCloudlet(brokerId, Constants.NO_OF_TASKS, 0);

            broker.submitVmList(vmList);
            broker.submitCloudletList(cloudletList);

            // Start the simulation
            CloudSim.startSimulation();

            // Print results when simulation is over
            List<Cloudlet> newList = broker.getCloudletReceivedList();
            CloudSim.stopSimulation();

            printCloudletList(newList);

            Log.printLine(SJF_Scheduler.class.getName() + " finished!");
        } catch (Exception e) {
            e.printStackTrace();
            Log.printLine("The simulation has been terminated due to an unexpected error");
        }
    }

    // Method to create a broker
    private static SJFDatacenterBroker createBroker(String name) throws Exception {
        return new SJFDatacenterBroker(name);
    }

    // Method to print Cloudlet objects
    private static void printCloudletList(List<Cloudlet> list) {
        int size = list.size();
        Cloudlet cloudlet;

        String indent = "    ";
        Log.printLine();
        Log.printLine("========== OUTPUT ==========");
        Log.printLine("Cloudlet ID" + indent + "STATUS" +
                indent + "Data center ID" +
                indent + "VM ID" +
                indent + indent + "Time" +
                indent + "Start Time" +
                indent + "Finish Time" +
                indent + "Waiting Time");

        DecimalFormat dft = new DecimalFormat("###.##");
        dft.setMinimumIntegerDigits(2);
        for (int i = 0; i < size; i++) {
            cloudlet = list.get(i);
            Log.print(indent + dft.format(cloudlet.getCloudletId()) + indent + indent);

            if (cloudlet.getCloudletStatus() == Cloudlet.SUCCESS) {
                Log.print("SUCCESS");

                Log.printLine(indent + indent + dft.format(cloudlet.getResourceId()) +
                        indent + indent + indent + dft.format(cloudlet.getVmId()) +
                        indent + indent + dft.format(cloudlet.getActualCPUTime()) +
                        indent + indent + dft.format(cloudlet.getExecStartTime()) +
                        indent + indent + indent + dft.format(cloudlet.getFinishTime())+
                        indent + indent + indent + dft.format(cloudlet.getWaitingTime()));
            }
        }
        // Calculate and print makespan
        double makespan = calcMakespan(list);
        Log.printLine("Makespan using SJF: " + makespan);
    }

    // Method to calculate makespan
    private static double calcMakespan(List<Cloudlet> list) {
        double makespan = 0;
        double[] dcWorkingTime = new double[Constants.NO_OF_DATA_CENTERS];

        for (int i = 0; i < Constants.NO_OF_TASKS; i++) {
            int dcId = list.get(i).getVmId() % Constants.NO_OF_DATA_CENTERS;
            if (dcWorkingTime[dcId] != 0) --dcWorkingTime[dcId];
            dcWorkingTime[dcId] += execMatrix[i][dcId] + commMatrix[i][dcId];
            makespan = Math.max(makespan, dcWorkingTime[dcId]);
        }
        return makespan;
    }
}




CloudSim is a popular Java-based framework for modeling and simulation of cloud computing infrastructures and services. It provides a comprehensive simulation environment that enables researchers and practitioners to study various aspects of cloud computing systems, such as resource provisioning, scheduling policies, energy management, and scalability.

Here are some common uses of CloudSim:

Performance Evaluation: CloudSim allows users to simulate and evaluate the performance of cloud computing systems under different scenarios, configurations, and workloads. This helps in understanding system behavior and optimizing resource utilization.
Algorithm Development: Researchers can use CloudSim to develop and test new algorithms, policies, and strategies for resource management, scheduling, load balancing, and other aspects of cloud computing.
Education and Training: CloudSim serves as an educational tool for students and professionals to learn about cloud computing concepts, architectures, and technologies through hands-on experimentation in a simulated environment.
Benchmarking: CloudSim can be used for benchmarking different cloud computing platforms, services, and solutions to compare their performance, scalability, and efficiency.
Policy Evaluation: CloudSim enables the evaluation of various policies and strategies related to energy consumption, cost optimization, SLA management, and fault tolerance in cloud environments.
Now, regarding SJF (Shortest Job First) scheduling:

SJF is a scheduling algorithm commonly used in operating systems and computer systems to schedule tasks or jobs based on their execution time. The basic idea is to select the task with the shortest estimated execution time to be executed next. SJF can be preemptive or non-preemptive.

Here's how to solve SJF scheduling:

Arrival of Jobs: Gather information about the jobs or tasks that need to be scheduled, including their arrival time, execution time, and any other relevant parameters.
Sort Jobs: Sort the jobs based on their estimated execution time in ascending order. The job with the shortest execution time will be scheduled first.
Schedule Execution: Execute the jobs one by one according to the sorted order. If SJF is preemptive, continuously check if a new job with a shorter execution time arrives while a job is executing and preempt the current job if necessary.
Update Execution Queue: After each job execution, update the queue of remaining jobs by removing the completed job and adding any new arrivals.
Repeat: Continue scheduling jobs until all jobs are completed or until the simulation time ends.
SJF scheduling aims to minimize the average waiting time of jobs in the system by prioritizing shorter jobs, which can lead to better system performance and resource utilization. However, it may suffer from starvation for longer jobs if short jobs keep arriving continuously.


